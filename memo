#!/bin/bash

file=$(date +%F).md
logdir=$HOME/logs
tmpfile=(/tmp/$(echo -n "$$" | md5sum))

if ! [ -e $logdir ] ; then
	mkdir -p $logdir
fi

if ! [ -e $logdir/.git ] ; then
	cd $logdir
	git init
	cd - > /dev/null
fi

function commit() {
    cd $logdir

    while true ; do
        case "$1" in
            "") break ;;
            *) git add $1; shift ;;
        esac
    done

    git commit -m "Auto-commit"
    cd - > /dev/null
}

function new() {
    vim -c 'set syntax=markdown' $tmpfile
    if [ -z "$(cat $tmpfile 2>/dev/null)" ] ; then
        echo "No changes." >&2
    else 
        echo -e "\n\n# $(date)\n\n$(cat $tmpfile)" >> $logdir/$file
        commit $file
    fi
}

function encapsulate_html() {
    read -r -d '' VAR << EOM
<head>
    <link rel="stylesheet" type="text/css" href="http://skutnik.iiens.net/github_like.css">
    <meta charset="utf-8">
</head>
<body>
$1
</body>
EOM

    echo "$VAR"
}

function attach() {
    attach_dir=$logdir/$(date +%F)_files

    mkdir -p $attach_dir

    while true ; do
        case "$1" in
            "") break ;;
            *) cp $1 $attach_dir/ ; shift ;;
        esac
    done

    commit $attach_dir
}

function validdate() {
    [[ "$1" =~ [0-9]{4}-[0-9]{2}-[0-9]{2}$ ]] && exit 0

    echo -e "Error: invalid date: $1\nPossible values include {all, week, day, YYYY-MM-DD}" >&2
    exit 1
}

function dates() {
	files="$(find $logdir -name '*.md' \
				| sort \
				| rev \
				| cut -d '/' -f 1 \
				| rev \
				| cut -d '.' -f 1 )"

	for day in $(seq 0 $[ $(date +%u) - 1 ] )
	do
        if [ $(date +%u) -eq 1 ] ; then
            week="$(date +%F)\n"
        else
            week="$week$(date -d"last-monday +$day days" +%F)\n"
        fi
	done

	week="$(echo -e ${week::-2})"

    while true ; do
        case "$1" in
            all) query="$files $query" ; shift ;;
			week) query="$week $query" ; shift ;;
			day) shift ;;
            "") break ;;
        *) if $(validdate $1) ; then query="$1 $query" ; fi ; shift ;;
        esac
    done

    if [ -z "$query" ] ; then
        echo $(date +%F)
    else
	    echo "$query"
    fi
}

function query() {
	what=$1; shift

	raw="$(dates $@)"

	if [ $? -eq 1 ] ; then
		exit 1
	fi

	list=""

	for date in $raw
	do
		target=$logdir/$date.md
		if [ $what = f -o $what = a ] ; then
			if [ -e $target ] ; then
				list="$list$target\n"
			fi
		fi

		if [ $what = d -o $what = a ] ; then
			attach_dir=$(echo $logdir/$date)_files
			if [ -e $attach_dir ] ; then
				list="$list$attach_dir\n"
			fi
		fi
	done

    if [ -z $list ] ; then
        if [ $what = d ] ; then
            lookingfor=directories
        else 
            if [ $what = f ] ; then
                lookingfor=files
            else
                lookingfor=results
            fi
        fi

        echo "Error: query: no $lookingfor found for query $raw" >&2
        exit 1
    else
	    echo -e ${list::-2} | sort
    fi
}

function action_view() {
    toview=$(query f $@)

	if [ $? -eq 1 ] ; then
		exit 1
	fi

    for f in $toview
    do
        cat "$f" >> $tmpfile
        echo -e "\n\n" >> $tmpfile
    done

    vim -R -c 'set syntax=markdown' $tmpfile
}

function action_query() {
    if ! [ "$1" = d -o "$1" = f ] ; then
        modifier=a
    else
        modifier=$1
        shift
    fi

    query $modifier $@
}

function html() {
    toexp=$(query f $@)

	if [ $? -eq 1 ] ; then
		exit 1
	fi

    for f in $toview
    do
        cat $f >> $tmpfile
        echo -e "\n\n" >> $tmpfile
    done

    echo "$(markdown2 --extras fenced-code-blocks \
                --extras cuddled-lists \
                --extras numbering \
                --extras tables \
                $toexp)"
}

function link_helper() {
    if [ -d $1 ] ; then
        echo "Skipping link to directory $1" >&2
        exit
    fi

	relpath=$(echo $1 | sed "s=$logdir/==")
    read -r -d '' VAR << EOM
<li>
    <a href="./$relpath">$(basename $1)</a>
</li>
EOM

    echo "$VAR"
}

function file_reference() {
	html="<h3>List of attached files</h3><ul>"

	for dir in $@
    do
        cd $dir/..
        for file in $(find $(basename $dir))
	    do
		    html="$html$(link_helper $file)"
	    done
        cd - > /dev/null
    done

	echo "$html</ul>"
}

function action_html() {
    html_source=$(html $@)

	if [ $? -eq 1 ] ; then
        echo "Error: action_html: error converting to HTML" >&2
		exit 1
	fi

    encapsulate_html "$html_source" > $tmpfile

    firefox $tmpfile
}

function action_pack() {
    archive=/tmp/memo.$$.tar
    query=$(query d $@)

	if [ $? -eq 1 ] ; then
		echo "No attached files detected" >&2
	fi

	file_reference "$query" > /tmp/index.html
	html $@ >> /tmp/index.html

	if [ $? -eq 1 ] ; then
		exit 1
	fi

    encapsulate_html "$(cat /tmp/index.html)" > /tmp/index.html

    tar -cf $archive -C /tmp index.html

	for attach in $query
    do
        cd $attach
        tar -rf $archive -C .. $(basename $attach)
        cd - > /dev/null
    done

    xz -z $archive -c 2>/dev/null

    if [ $? -eq 1 ] ; then
        echo -e "Avoiding writing compressed data to a terminal.\nPipe this command's output into a file." >&2
        exit 1
    fi
}

function action_edit() {
    vim  $logdir
}

while true ; do
    case "$1" in
        attach) shift; attach $@ ; exit ;;
		query) shift; action_query $@ ; exit ;;
        view) shift; action_view $@ ; exit ;;
		html) shift; action_html $@ ; exit ;;
        pack) shift; action_pack $@ ; exit ;;
        edit) shift; action_edit $@ ; exit ;;
        "") break ;;
        *) target="$target$1 " ; shift ;;
    esac
done

new
